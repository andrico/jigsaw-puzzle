{"version":3,"sources":["utils/dom.js","utils/pipe.js","utils/tap.js","utils/event-listeners.js","lib/make-canvas.js","lib/load-image.js","lib/make-puzzle.js","utils/object-helpers.js","utils/get-neighbors.js","utils/sides.js","utils/bezier.js","utils/random.js","lib/make-shapes.js","lib/make-pieces.js","lib/shuffle.js","utils/array-helpers.js","lib/paint-piece.js","lib/clear-canvas.js","lib/paint.js","utils/run-if.js","lib/activate.js","lib/deactivate.js","lib/move.js","lib/share-connections.js","lib/is-close.js","lib/snap.js","lib/status.js","lib/gather.js","lib/clone.js","index.js"],"names":["$","selector","document","querySelector","pipe","fns","x","reduce","acc","f","tap","fn","addListener","what","el","cb","name","addEventListener","remove","removeEventListener","event","canvas","scroll","window","resize","click","element","mousedown","mousemove","mouseup","body","updCanvas","state","getBoundingClientRect","top","left","pos","y","makeCanvas","DPI","devicePixelRatio","tagName","createElement","ctx","getContext","getComputedStyle","height","width","parseInt","style","appendChild","loadImage","src","Promise","resolve","image","Image","onload","makePuzzle","ps","img","attraction","container","size","draggable","onComplete","isPortrait","scale","timeStamp","Date","now","done","cols","rows","occupy","isTruthy","prop","obj","removeNull","newObj","Object","keys","forEach","same","val","getNeighbors","i","slot","neighbors","right","bottom","allSides","opposite","side","isVertical","isHorizontal","sw","nw","bezier","pieceSize","middle","cx1","cy1","cx2","cy2","ex","ey","bezierInv","b","map","bb","random","hash","Math","cos","sin","makeShapes","piece","getNeighbor","id","find","neighborShape","shapes","shapedSides","min","filter","includes","flatSides","makePieces","puzzle","piecesAmount","Array","pieces","orgPos","floor","curPos","active","connections","shuffle","xs","sort","filterUniqe","Set","randomElement","length","activeLast","connectedFirst","reverse","slice","mapReverse","reduceRight","arr","paintPiece","shapeOffset","max","save","beginPath","translate","drawSide","closePath","clip","drawImage","restore","highlight","alsoActive","shadowColor","strokeStyle","shadowBlur","lineWidth","shadowOffsetX","shadowOffsetY","lineCap","lineJoin","stroke","lineTo","bezierCurveTo","rotate","PI","clearCanvas","clearRect","paint","runIf","isWithinX","e","clientX","isWithinY","clientY","isClicked","getPiecePos","activate","p","deactivate","move","shareConnections","newPiece","isClose","p1","p2","XY","invXY","positive","offset","moveConnections","distance","snap","activePieces","entries","neighbor","newPos","status","gather","clone","JSON","parse","stringify","onChange","changecb","console","warn","initState","eventListeners","newGame","getState","setState","newState","update","destroy","listener"],"mappings":"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","file":"jigsaw-puzzle.min.js","sourceRoot":"../src","sourcesContent":["export const $ = (selector) => document.querySelector(selector);\n","export const pipe = (...fns) => (x) => [...fns].reduce((acc, f) => f(acc), x);\n","export const tap = (fn) => (x) => {\n  fn(x);\n  return x;\n};\n","const addListener = (what, el, cb) => {\n  const name = cb;\n  el.addEventListener(what, cb);\n  return {\n    remove: () => el.removeEventListener(what, name),\n  };\n};\n\nexport const event = (canvas) => ({\n  scroll: (cb) => addListener(\"scroll\", window, cb),\n  resize: (cb) => addListener(\"resize\", window, cb),\n  click: (cb) => addListener(\"click\", canvas.element, cb),\n  mousedown: (cb) => addListener(\"mousedown\", canvas.element, cb),\n  mousemove: (cb) => addListener(\"mousemove\", canvas.element, cb),\n  mouseup: (cb) => addListener(\"mouseup\", document.body, cb),\n});\n","export const updCanvas = (state) => {\n  const { top, left } = state.canvas.element.getBoundingClientRect();\n  // const { width, height } = getComputedStyle(state.canvas.element);\n  state.canvas.pos = { x: left, y: top };\n  // state.canvas.width = parseInt(width, 0);\n  // state.canvas.height = parseInt(height, 0);\n\n  return state;\n};\n\nexport const makeCanvas = (element) => {\n  const DPI = window.devicePixelRatio;\n  const canvas =\n    element.tagName === \"CANVAS\" ? element : document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n\n  const { height, width } = getComputedStyle(element);\n\n  canvas.width = parseInt(width, 0) * DPI;\n  canvas.height = parseInt(height, 0) * DPI;\n  canvas.style.width = parseInt(width, 0) + \"px\";\n  canvas.style.height = parseInt(height, 0) + \"px\";\n\n  if (element.tagName !== \"CANVAS\") {\n    element.appendChild(canvas);\n  }\n\n  const { top, left } = canvas.getBoundingClientRect();\n\n  return {\n    element: canvas,\n    ctx,\n    pos: { x: left, y: top },\n    width: canvas.width,\n    height: canvas.height,\n    DPI,\n  };\n};\n","export const loadImage = (src) =>\n  new Promise((resolve) => {\n    var image = new Image();\n    image.onload = () =>\n      resolve({ image, width: image.width, height: image.height });\n\n    image.src = src;\n  });\n","export const makePuzzle = (\n  ps,\n  img,\n  attraction,\n  container,\n  size,\n  draggable,\n  onComplete\n) => {\n  const { width, height } = getComputedStyle(container);\n  const isPortrait = img.width < img.height;\n  const DPI = window.devicePixelRatio;\n  const scale =\n    parseInt([isPortrait ? height : width], 0) /\n    img[isPortrait ? \"height\" : \"width\"];\n\n  return {\n    timeStamp: Date.now(),\n    done: false,\n    cols: ps.x,\n    rows: ps.y,\n    width: img.width * scale * DPI,\n    height: img.height * scale * DPI,\n    attraction,\n    scale,\n    occupy: size,\n    draggable,\n    onComplete,\n  };\n};\n","export const isTruthy = (prop) => (obj) => obj[prop];\n\n// rm keys with value null from obj\nexport const removeNull = (obj) => {\n  let newObj = {};\n  Object.keys(obj).forEach((prop) => {\n    if (obj[prop] !== null) {\n      newObj[prop] = obj[prop];\n    }\n  });\n  return newObj;\n};\n\nexport const same = (val, prop) => (obj) => obj[val] === prop;\n","import { removeNull } from './object-helpers.js'\n\n// calculates which pieces are next to given piece\n// breaks if rows/cols are 1\nexport const getNeighbors = (i, rows, cols) => {\n  const slot = i + 1\n\n  const neighbors = {\n    top: slot > cols ? i - cols : null,\n    right: slot % cols !== 0 ? i + 1 : null,\n    bottom: slot <= (rows - 1) * cols ? i + cols : null,\n    left: slot % cols !== 1 ? i - 1 : null,\n  }\n\n  return removeNull(neighbors)\n}\n","export const allSides = [\"top\", \"right\", \"bottom\", \"left\"];\nexport const opposite = (side) =>\n  ({\n    top: \"bottom\",\n    right: \"left\",\n    bottom: \"top\",\n    left: \"right\",\n  }[side]);\n\nexport const isVertical = (side) => side === \"top\" || side === \"bottom\";\nexport const isHorizontal = (side) => !isVertical(side);\n\nexport const sw = (side) => side === \"bottom\" || side === \"left\";\nexport const nw = (side) => side === \"top\" || side === \"left\";\n","export const bezier = (pieceSize = 100, knobSize = 100 /* knobPos = 20 */) => {\n  const scale = knobSize / 110;\n  const middle = pieceSize / 2;\n\n  return [\n    {\n      cx1: 0,\n      cy1: 0,\n      cx2: middle - scale * 10,\n      cy2: scale * 5,\n      ex: middle - scale * 13,\n      ey: scale * 0,\n    }, // left shoulder\n    {\n      cx1: middle - scale * 13,\n      cy1: scale * 0,\n      cx2: middle - scale * 10,\n      cy2: scale * -2,\n      ex: middle - scale * 12,\n      ey: scale * -5,\n    }, // left neck\n    {\n      cx1: middle - scale * 12,\n      cy1: scale * -5,\n      cx2: middle - scale * 30,\n      cy2: scale * -30,\n      ex: middle,\n      ey: scale * -30,\n    }, // left head\n    {\n      cx1: middle,\n      cy1: scale * -30,\n      cx2: middle - scale * -30,\n      cy2: scale * -31,\n      ex: middle - scale * -12,\n      ey: scale * -5,\n    }, // right head\n    {\n      cx1: middle - scale * -12,\n      cy1: scale * -5,\n      cx2: middle - scale * -10,\n      cy2: scale * -2,\n      ex: middle - scale * -13,\n      ey: scale * 0,\n    }, // right neck\n    {\n      cx1: middle - scale * -13,\n      cy1: scale * 0,\n      cx2: middle - scale * -10,\n      cy2: scale * 5,\n      ex: pieceSize,\n      ey: scale * 0,\n    }, // right shoulder\n  ];\n};\n\nexport const bezierInv = (b, y = 1) =>\n  b.map((bb, i) => ({\n    cx1: bb.cx1 * y,\n    cy1: bb.cy1 * -1,\n    cx2: bb.cx2 * y,\n    cy2: bb.cy2 * -1,\n    ex: bb.ex * y,\n    ey: bb.ey * -1,\n  }));\n","// random number 0 - 1, based on hash\nexport const random = (hash = Math.random()) =>\n  (Math.cos(Math.sin((hash + 69) * 1337.1337) * 6669.1337) + 1) * 0.5;\n","import { allSides, opposite, isVertical, sw } from \"./../utils/sides.js\";\nimport { bezier, bezierInv } from \"./../utils/bezier.js\";\nimport { random } from \"./../utils/random.js\";\n\nexport const makeShapes = (acc, piece) => {\n  const getNeighbor = (id) => acc.find((piece) => piece.id === id);\n  const neighborShape = (id, side) =>\n    getNeighbor(id) &&\n    getNeighbor(id).shapes &&\n    getNeighbor(id).shapes[opposite(side)];\n\n  // 'flat' if no neighbor\n  const flatSides = ({ neighbors }) =>\n    allSides\n      .filter((side) => !Object.keys(neighbors).includes(side))\n      .reduce((acc, side) => ({ [side]: \"flat\", ...acc }), {});\n\n  // a random- or an inverse bezier if the neighbor has a shape\n  const shapedSides = ({ neighbors, width, height }) =>\n    Object.keys(neighbors).reduce(\n      (acc, side) => ({\n        [side]: neighborShape(neighbors[side], side) // neighbor has shape\n          ? bezierInv(neighborShape(neighbors[side], side)) // mirror that shape\n          : random() >= 0.5 // else 50/50\n          ? bezier(isVertical(side) ? width : height, Math.min(width, height)) // be 'outy'\n          : bezierInv(\n              bezier(isVertical(side) ? width : height, Math.min(width, height))\n            ), // or 'inny\n        ...acc,\n      }),\n      {}\n    );\n\n  const shapes = {\n    ...shapedSides(piece),\n    ...flatSides(piece),\n  };\n\n  return [{ ...piece, shapes }, ...acc];\n};\n","import { getNeighbors } from \"./../utils/get-neighbors.js\";\nimport { makeShapes } from \"./make-shapes.js\";\n\nexport const makePieces = (puzzle) => {\n  const piecesAmount = [...Array(puzzle.rows * puzzle.cols)];\n  const width = (puzzle.width / puzzle.cols) * puzzle.occupy;\n  const height = (puzzle.height / puzzle.rows) * puzzle.occupy;\n  const pieces = piecesAmount\n    .map((x, i) => ({\n      id: i,\n      orgPos: {\n        x: (i % puzzle.cols) * width,\n        y: Math.floor(i / puzzle.cols) * height,\n      },\n      curPos: { x: 0, y: 0 },\n      width,\n      height,\n      neighbors: getNeighbors(i, puzzle.rows, puzzle.cols),\n      active: false, // if clicked/dragged\n      connections: [], // every other piece this one is snapped together with\n    }))\n    .reduce(makeShapes, []);\n\n  return pieces;\n};\n","import { random } from \"./../utils/random.js\";\n\nexport const shuffle = (state) => ({\n  ...state,\n  pieces: state.pieces.map((piece, i) => ({\n    ...piece,\n    connections: [],\n    curPos: {\n      x: random(i) * (state.canvas.width - state.pieces[0].width),\n      y: random(i + 123) * (state.canvas.height - state.pieces[0].height),\n    },\n  })),\n});\n","const { floor, random } = Math;\n\nexport const shuffle = (xs) =>\n  xs\n    .map((x) => [random(), x])\n    .sort((x, y) => x[0] - y[0])\n    .map((x) => x[1]);\n\n// shallow filtering\nexport const filterUniqe = (xs) => [...new Set(xs)];\nexport const randomElement = (xs) => xs[floor(random() * xs.length)];\nexport const activeLast = (x, y) => (y.active ? -1 : 1);\nexport const connectedFirst = (x, y) =>\n  x.connections.length > y.connections.length ? -1 : 1;\nexport const reverse = (xs) => xs.slice(0).reverse();\nexport const map = (fn) => (xs) => xs.map(fn);\nexport const mapReverse = (fn) => (xs) =>\n  xs.reduceRight((acc, el, i, arr) => [...acc, fn(el, i, arr, acc)], []);\n\nexport const sort = (fn) => (xs) => xs.sort(fn);\n","import { allSides } from \"./../utils/sides.js\";\n\nexport const paintPiece = (state) => (piece) => {\n  const { image } = state.image;\n  const { ctx, DPI } = state.canvas;\n  const { scale, occupy } = state.puzzle;\n  const shapeOffset = Math.max(piece.width, piece.height);\n\n  ctx.save();\n  ctx.beginPath();\n  ctx.translate(piece.curPos.x, piece.curPos.y + piece.height);\n\n  allSides.forEach((side) => {\n    drawSide(ctx, piece.shapes[side], {\n      x: side === \"top\" || side === \"bottom\" ? -piece.height : -piece.width,\n      y: side === \"top\" || side === \"bottom\" ? piece.width : piece.height,\n    });\n  });\n\n  ctx.closePath();\n  ctx.clip();\n\n  ctx.drawImage(\n    image, // image\n    (piece.orgPos.x - shapeOffset) / scale / DPI / occupy, // what part of image\n    (piece.orgPos.y - shapeOffset) / scale / DPI / occupy, // what part of image\n    (piece.width + shapeOffset * 2) / scale / DPI / occupy, // how much of image\n    (piece.height + shapeOffset * 2) / scale / DPI / occupy, // how much of image\n    piece.curPos.x / state.canvas.width - shapeOffset, // where on canvas\n    piece.curPos.y / state.canvas.height - shapeOffset - piece.height, // where on canvas\n    piece.width + shapeOffset * 2, // how big on canvas\n    piece.height + shapeOffset * 2 // how big on canvas\n  );\n\n  ctx.restore();\n\n  const highlight = !state.puzzle.done && (piece.active || piece.alsoActive);\n\n  ctx.shadowColor = highlight\n    ? \"rgba(100, 100, 100, 1)\"\n    : \"rgba(50, 50, 50, 1)\";\n  ctx.strokeStyle = highlight\n    ? \"rgba(225, 225, 225, 1)\"\n    : \"rgba(220, 220, 220, 1)\";\n  ctx.shadowBlur = highlight ? 2 : 1;\n  ctx.lineWidth = highlight ? 2 : 1;\n\n  ctx.shadowOffsetX = ctx.shadowOffsetY = -1;\n  ctx.lineCap = \"round\";\n  ctx.lineJoin = \"round\";\n\n  ctx.stroke();\n\n  return piece;\n};\n\nfunction drawSide(ctx, side, size) {\n  ctx.translate(0, size.x);\n\n  if (side === \"flat\") {\n    ctx.lineTo(size.y, 0);\n  } else {\n    side.forEach((b) => {\n      ctx.bezierCurveTo(b.cx1, b.cy1, b.cx2, b.cy2, b.ex, b.ey);\n    });\n  }\n\n  ctx.rotate(Math.PI / 2);\n}\n","export const clearCanvas = (state, ctx) => {\n  ctx.clearRect(0, 0, state.canvas.width, state.canvas.height);\n  return ctx;\n};\n","import { map } from \"./../utils/array-helpers.js\";\nimport { paintPiece } from \"./paint-piece.js\";\nimport { clearCanvas } from \"./clear-canvas.js\";\n\nexport const paint = (state) => ({\n  ...state,\n  canvas: {\n    ...state.canvas,\n    ctx: clearCanvas(state, state.canvas.ctx),\n  },\n  pieces: map(paintPiece(state))(state.pieces),\n});\n","// ex. runIf(console.log)(true)('foo') -> prints 'foo'\n// ex. runIf(console.log)(false)('bar') -> returns 'bar'\n// ex. runIf(console.log)(x => x === 'bar'))('bar') -> prints 'bar'\nexport const runIf = (fn) => (x) => (y) =>\n  (typeof x === \"function\" ? x(y) : x) ? fn(y) : y;\n","import { activeLast, mapReverse, sort, map } from \"./../utils/array-helpers.js\";\nimport { isTruthy } from \"./../utils/object-helpers.js\";\nimport { runIf } from \"./../utils/run-if.js\";\nimport { pipe } from \"./../utils/pipe.js\";\nimport { tap } from \"./../utils/tap.js\";\n\nconst isWithinX = (state, piece, e) =>\n  (e.clientX - state.canvas.pos.x) * state.canvas.DPI >= piece.curPos.x &&\n  (e.clientX - state.canvas.pos.x) * state.canvas.DPI <=\n    piece.curPos.x + piece.width;\n\nconst isWithinY = (state, piece, e) =>\n  (e.clientY - state.canvas.pos.y) * state.canvas.DPI >= piece.curPos.y &&\n  (e.clientY - state.canvas.pos.y) * state.canvas.DPI <=\n    piece.curPos.y + piece.height;\n\nconst isClicked = (state, piece, e) =>\n  isWithinX(state, piece, e) && isWithinY(state, piece, e);\n\nconst getPiecePos = (state, piece, e) => ({\n  x: (e.clientX - state.canvas.pos.x) * state.canvas.DPI - piece.curPos.x,\n  y: (e.clientY - state.canvas.pos.y) * state.canvas.DPI - piece.curPos.y,\n});\n\n// pieces gets painted bottom to top, we need to check in reverse order\nexport const activate = (e) => (state) => ({\n  ...state,\n  pieces: pipe(\n    // activate clicked piece (first occurence)\n    mapReverse((piece, i, arr, acc) => ({\n      ...piece,\n      active:\n        !acc.find(isTruthy(\"active\")) && isClicked(state, piece, e)\n          ? getPiecePos(state, piece, e)\n          : false,\n    })),\n\n    mapReverse((piece, i, arr) => ({\n      ...piece,\n      // activate the active piece's connections\n      active: arr.find((p) => p.active && p.connections.includes(piece.id))\n        ? getPiecePos(state, piece, e)\n        : // activate all pieces if none was clicked (and puzzle is draggable)\n        !arr.find(isTruthy(\"active\")) && state.puzzle.draggable\n        ? getPiecePos(state, piece, e)\n        : piece.active,\n    })),\n\n    // put the active piece(s) on top\n    // if puzzle isn't done or not all pieces are active (puzzle dragged)\n    runIf(sort(activeLast))(\n      (ps) =>\n        !state.puzzle.done &&\n        ps.filter((p) => p.active).length !== state.pieces.length\n    )\n  )(state.pieces),\n});\n","export const deactivate = (state) => ({\n  ...state,\n  pieces: state.pieces\n    // .sort(connectedFirst)\n    .map((piece) => ({\n      ...piece,\n      active: false,\n    })),\n});\n","export const move = ({ clientX, clientY }) => (state) => ({\n  ...state,\n  pieces: state.pieces.map((piece) => ({\n    ...piece,\n    curPos: piece.active\n      ? {\n          x: (clientX - state.canvas.pos.x) * state.canvas.DPI - piece.active.x,\n          y: (clientY - state.canvas.pos.y) * state.canvas.DPI - piece.active.y,\n        }\n      : piece.curPos,\n  })),\n});\n","import { filterUniqe } from \"./../utils/array-helpers.js\";\n\n// should return, not modify\nexport const shareConnections = (state, piece, newPiece) => {\n  piece.connections = filterUniqe([\n    piece.id,\n    newPiece.id,\n    ...piece.connections,\n    ...newPiece.connections,\n  ]);\n\n  piece.connections.forEach((id) => {\n    const connection = state.pieces.find((piece) => piece.id === id);\n    connection.connections = filterUniqe(piece.connections);\n  });\n\n  newPiece.connections.forEach((id) => {\n    const connection = state.pieces.find((piece) => piece.id === id);\n    connection.connections = filterUniqe(piece.connections);\n  });\n};\n","import { isVertical, nw } from \"./../utils/sides.js\";\n\n// is piece1 close to piece2\nexport const isClose = (p1, p2, state, side) => {\n  const { attraction } = state.puzzle;\n\n  const XY = isVertical(side) ? \"y\" : \"x\";\n  const invXY = XY === \"x\" ? \"y\" : \"x\";\n\n  const positive = nw(side) ? false : true;\n\n  const size = p1[XY === \"y\" ? \"height\" : \"width\"];\n  const offset = positive ? p2.curPos[XY] + size : p2.curPos[XY] - size;\n\n  return (\n    p1.curPos[XY] <= offset + attraction &&\n    p1.curPos[XY] >= offset - attraction &&\n    p1.curPos[invXY] <= p2.curPos[invXY] + attraction &&\n    p1.curPos[invXY] >= p2.curPos[invXY] - attraction\n  );\n};\n","import { shareConnections } from \"./share-connections.js\";\nimport { isClose } from \"./is-close.js\";\nimport { same } from \"./../utils/object-helpers.js\";\n\nconst moveConnections = (state, [...pieceIds], distance) => {\n  pieceIds.forEach((id) => {\n    const piece = state.pieces.find(same(\"id\", id));\n    piece.curPos = {\n      x: piece.curPos.x + distance.x,\n      y: piece.curPos.y + distance.y,\n    };\n  });\n};\n\n// export const snapNew = (state) => ({\n//   ...state,\n//   pieces: state.pieces.map((piece) => ({\n//     ...piece,\n//     curPos:\n//       !piece.active ||\n//       !Object.entries(piece.neighbors).find(([side, id]) =>\n//         isClose(state.pieces.find(same(\"id\", id)), piece, state, side)\n//       )\n//         ? piece.curPos\n//         : { x: 10, y: 20 }\n//   }))\n// });\n\nexport const snap = (state) => {\n  const activePieces = state.pieces.filter((piece) => piece.active);\n\n  if (!activePieces.length || activePieces.length === state.pieces.length) {\n    return state;\n  }\n\n  activePieces.forEach((piece) => {\n    Object.entries(piece.neighbors).forEach(([side, id]) => {\n      const neighbor = state.pieces.find(same(\"id\", id));\n\n      if (isClose(neighbor, piece, state, side)) {\n        const newPos = {\n          x:\n            neighbor.curPos.x +\n            (side === \"right\"\n              ? -neighbor.width\n              : side === \"left\"\n              ? +neighbor.width\n              : 0),\n          y:\n            neighbor.curPos.y +\n            (side === \"top\"\n              ? neighbor.height\n              : side === \"bottom\"\n              ? -neighbor.height\n              : 0),\n        };\n\n        // order is important\n        moveConnections(state, piece.connections, {\n          x: newPos.x - piece.curPos.x,\n          y: newPos.y - piece.curPos.y,\n        });\n\n        piece.curPos = newPos;\n\n        // piece.connections = neighbor.connections = shareConnections(state, piece, neighbor);\n\n        shareConnections(state, piece, neighbor);\n      }\n    });\n  });\n\n  return state;\n};\n","export const status = (state) => {\n  if (\n    state.pieces[0].connections.length ===\n      state.puzzle.rows * state.puzzle.cols &&\n    !state.puzzle.done\n  ) {\n    state.puzzle.done = true;\n    state.puzzle.onComplete(state);\n  }\n  return state;\n};\n","export const gather = (state) => {\n  /**\n   * map pieces and move them onto the board after window resize\n   */\n  state.pieces = state.pieces.map((piece) => ({\n    ...piece,\n    curPos: {\n      x:\n        piece.curPos.x - piece.width > state.canvas.width * state.canvas.DPI\n          ? state.canvas.width - piece.width\n          : piece.curPos.x,\n      y:\n        piece.curPos.y - piece.height > state.canvas.height * state.canvas.DPI\n          ? state.canvas.height - piece.height\n          : piece.curPos.y,\n    },\n  }));\n  return state;\n};\n","export const clone = (state) => ({\n  image: state.image,\n  canvas: state.canvas,\n  pieces: JSON.parse(JSON.stringify(state.pieces)),\n  puzzle: JSON.parse(JSON.stringify(state.puzzle)),\n});\n","import { $ } from \"./utils/dom.js\";\nimport { pipe } from \"./utils/pipe.js\";\nimport { tap } from \"./utils/tap.js\";\nimport { event } from \"./utils/event-listeners.js\";\n\nimport { makeCanvas, updCanvas } from \"./lib/make-canvas.js\";\nimport { loadImage } from \"./lib/load-image.js\";\nimport { makePuzzle } from \"./lib/make-puzzle.js\";\nimport { makePieces } from \"./lib/make-pieces.js\";\nimport { shuffle } from \"./lib/shuffle.js\";\nimport { paint } from \"./lib/paint.js\";\nimport { activate } from \"./lib/activate.js\";\nimport { deactivate } from \"./lib/deactivate.js\";\nimport { move } from \"./lib/move.js\";\nimport { snap } from \"./lib/snap.js\";\nimport { status } from \"./lib/status.js\";\nimport { gather } from \"./lib/gather.js\";\nimport { clone } from \"./lib/clone.js\";\n\nexport const puzzle = async ({\n  element,\n  restore = {},\n  image: img = \"\",\n  pieces: ps = { x: 6, y: 4 },\n  attraction = 20,\n  size = 0.8,\n  draggable = false,\n  onComplete = () => {},\n  onChange: changecb = () => {},\n}) => {\n  // game board\n  const container = typeof element === \"string\" ? $(element) : element;\n\n  if (!container) {\n    console.warn(`Couldn't find element: ${element}`);\n    return;\n  }\n\n  // initial setup\n  const canvas = makeCanvas(container);\n  const image = restore.image || (await loadImage(img));\n  const puzzle = () =>\n    restore.puzzle ||\n    makePuzzle(ps, image, attraction, container, size, draggable, onComplete);\n  const pieces = restore.pieces || makePieces(puzzle());\n\n  // passed on-change callback\n  const onChange = tap(pipe(clone, changecb));\n\n  // initial state\n  const initState = () => ({\n    image,\n    canvas,\n    pieces,\n    puzzle: puzzle(),\n  });\n\n  // 'global' game state\n  let state = initState();\n\n  // initial paint\n  state = restore.puzzle ? pipe(paint)(state) : pipe(shuffle, paint)(state);\n\n  // user interactions\n  const eventListeners = [\n    event(window).resize(\n      (e) => (state = pipe(updCanvas, gather, paint)(state))\n    ),\n    event(window).scroll((e) => (state = pipe(updCanvas)(state))),\n    event(state.canvas).mousedown(\n      (e) => (state = pipe(activate(e), paint)(state))\n    ),\n    event(state.canvas).mousemove((e) => (state = pipe(move(e), paint)(state))),\n    event(document.body).mouseup(\n      (e) => (state = pipe(snap, deactivate, status, paint, onChange)(state))\n    ),\n  ];\n\n  // exposed api\n  return {\n    newGame: () => (state = pipe(shuffle, paint)(initState())),\n    getState: () => clone(state),\n    setState: (newState) => (state = pipe(clone, paint)(newState)),\n    update: () => (state = pipe(updCanvas, paint)(state)),\n    destroy: () => {\n      if (element.tagName !== \"CANVAS\") {\n        state.canvas.element.remove();\n      }\n\n      state = null;\n      eventListeners.map((listener) => listener.remove());\n    },\n  };\n};\n\nexport default puzzle;\n"]}